name: üöÄ Build & Deploy Laravel Docker Stack

on:
  push:
    branches: ["main"]

env:
  IMAGE_NAME: ${{ vars.IMAGE_NAME || 'johnbibs/laravel-api' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üîê Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üè∑Ô∏è Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest

      - name: üê≥ Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: ‚¨áÔ∏è Checkout (compose/env files)
        uses: actions/checkout@v4

      - name: üîê Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AWS_PRIVATE_KEY }}

      - name: üöÄ Deploy on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER || 'ubuntu' }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          set -e

          # Copy compose and config to server (home directory)
          rsync -avz \
            -e "ssh -o StrictHostKeyChecking=no" \
            docker-compose.yml nginx.conf .env \
            ${EC2_USER}@${EC2_HOST}:~/

          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} bash -s << EOF
          set -euo pipefail

          echo "${DOCKERHUB_TOKEN}" | sudo docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

          cd ~

          # Cleanup old containers/images/volumes/networks
          sudo docker stop $(sudo docker ps -q) || true
          sudo docker rm $(sudo docker ps -aq) || true
          sudo docker system prune -af --volumes || true

          # Always pull the newest image
          sudo docker pull ${IMAGE_NAME}:latest

          # Stop & remove stack (containers, networks, anonymous vols)
          # Preserve named volumes by default
          sudo docker compose down --remove-orphans

          # Aggressive prune (images/containers/networks/build cache)
          sudo docker system prune -af --volumes || true

          # Recreate stack
          sudo docker compose up -d

          # Show status
          sudo docker compose ps
          sudo docker compose images || true

          EOF
