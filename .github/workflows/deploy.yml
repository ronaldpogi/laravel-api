name: 🚀 Build & Deploy Laravel API to EC2

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}          # e.g. johnbibs/laravel-api
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}

jobs:
  build:
    name: 🛠️ Build & Push
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🔐 Docker login
        run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: 🧱 Build image
        run: docker build -t $IMAGE_NAME:latest .

      - name: 🏷️ Push image
        run: docker push $IMAGE_NAME:latest

  deploy:
    name: 🚢 Deploy to EC2
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout (for files to upload)
        uses: actions/checkout@v4

      - name: ✍️ Write SSH key
        run: |
          echo "${AWS_PRIVATE_KEY}" > key.pem
          chmod 600 key.pem

      - name: 📤 Upload compose & nginx
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ubuntu   # ✅ STATIC
          key: ${{ env.AWS_PRIVATE_KEY }}
          source: "docker-compose.yml,nginx.conf,.env"
          target: "~"

      - name: 🚀 Restart stack (fresh with auto-clean)
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$EC2_HOST << 'EOF'
            set -e
            echo "${DOCKERHUB_TOKEN}" | sudo docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

            echo "🧹 Cleaning up unused Docker data..."
            sudo docker container prune -f || true
            sudo docker image prune -af || true
            sudo docker volume prune -f || true
            sudo docker system prune -af --volumes || true

            echo "🧼 Cleaning apt cache..."
            sudo apt clean || true

            echo "🧾 Current disk usage:"
            df -h

            echo "🔻 Stopping stack..."
            sudo docker compose down -v || true

            echo "📦 Pulling fresh images..."
            sudo docker compose pull

            echo "🚢 Starting stack..."
            sudo docker compose up -d

            echo "✅ Deployment finished!"
            sudo docker ps
          EOF
