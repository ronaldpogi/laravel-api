name: üöÄ Build & Deploy Laravel API to AWS EC2

on:
  push:
    branches:
      - main

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ubuntu
  IMAGE_NAME: johnbibs/laravel-api

jobs:
  build:
    name: üõ†Ô∏è Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: üì¶ Build & Push Image to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest

  deploy:
    name: üöÄ Deploy to AWS EC2
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîë Save SSH Private Key
        run: |
          echo "${{ env.AWS_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: üìÇ Sync Project Files to EC2
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i key.pem" \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude '.github' \
            ./ ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/${{ env.EC2_USER }}/app

      - name: üê≥ Deploy with Docker Compose on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
            cd ~/app
            
            # Export DockerHub credentials
            export DOCKERHUB_USERNAME="${{ env.DOCKERHUB_USERNAME }}"
            export DOCKERHUB_TOKEN="${{ env.DOCKERHUB_TOKEN }}"
            
            # Login to DockerHub
            echo "$DOCKERHUB_TOKEN" | sudo docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            
            # Stop existing containers (ignore errors if none)
            sudo docker compose down || true
            
            # Pull the latest image(s)
            sudo docker compose pull
            
            # Start containers in detached mode
            sudo docker compose up -d
            
            # Remove unused images to save space
            sudo docker image prune -f
          EOF

      - name: üßπ Cleanup SSH Key
        if: always()
        run: rm -f key.pem
