services:
  app:
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    image: ${IMAGE_NAME}:latest
    restart: unless-stopped
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "php -v > /dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    volumes:
      - storage:/usr/share/nginx/html/storage:rw
      # NOTE: do NOT mount a volume on /usr/share/nginx/html/public or you'll hide built assets

  queue-worker:
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    image: ${IMAGE_NAME}:latest
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      IS_WORKER: "true"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["php", "artisan", "queue:work", "--sleep=2", "--tries=3", "--timeout=120"]
    volumes:
      - storage:/usr/share/nginx/html/storage:rw
    healthcheck:
      test: ["CMD", "php", "-r", "exit(extension_loaded('redis')?0:1);"]
      interval: 30s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:1.27-alpine
    restart: unless-stopped
    depends_on:
      app:
        condition: service_started
    ports:
      - "80:80"
      # - "443:443"  # enable if you terminate TLS on Nginx and mount certs
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - storage:/usr/share/nginx/html/storage:ro
      - ./:/usr/share/nginx/html:ro
      # Public files are inside the app image; Nginx sees them via the appâ€™s container FS

  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRESQL_DATABASE}
      POSTGRES_USER: ${POSTGRESQL_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  storage:
  db-data:
  redis-data:
